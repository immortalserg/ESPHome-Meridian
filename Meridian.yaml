substitutions:
  name: meridian-esp32
  fname: Meridian 561
  manufacture: Meridian Audio Ltd
  device_description: Digital Surround Controller
  version: 1.0.0
  rxpin: GPIO16
  txpin: GPIO17
  irpin: GPIO14

esphome:
  name: ${name}
  friendly_name: ${fname}
  project:
    name: ${manufacture}.${device_description}
    version: ${version}
  on_boot:
    priority: -100
    then:
      - delay: 2s
      - uart.write: "CS3\r"
esp32:
  board: esp32dev
  framework:
    type: arduino
api:
  encryption:
    key: !secret api_meridian
  on_client_connected:
    then:
      - lambda: |-
          id(uptime_s).publish_state(id(uptime_s).state);
ota:
  - platform: esphome
    password: !secret ota
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Meridian-Esp32"
    password: "meridian561"
captive_portal:
web_server:
  port: 80
  local: true

remote_receiver:
  pin:
    number: ${irpin}
    inverted: true
    mode: INPUT_PULLUP
  dump: rc6
  tolerance: 25%
  filter: 4us
  idle: 10ms


uart:
  - id: uart_2
    tx_pin: ${txpin}  # TX пин ESP
    rx_pin: ${rxpin}  # RX пин ESP
    baud_rate: 9600
    stop_bits: 1
    parity: NONE
    # Триггер на получение строки, заканчивающейся на \n
    debug:
      direction: BOTH
      dummy_receiver: true
      after:
        delimiter: "\r"  # Делимитер \r
      sequence:
        - lambda: |-
            UARTDebug::log_string(direction, bytes);
            std::string str(bytes.begin(), bytes.end());
            ESP_LOGD("UART", "Received string length: %d", str.length());
            if (str.length() == 13) {
              std::string volume_str = str.substr(10, 2);
              std::string source_code = str.substr(0, 10);
              ESP_LOGD("UART", "Source code: %s", source_code.c_str());
              std::map<std::string, std::string> source_map = {
                {"CD        ", "CD"},
                {"Radio     ", "Radio"},
                {"DTV       ", "DTV"},
                {"TV        ", "TV"},
                {"Tape1     ", "Tape1"},
                {"Tape2     ", "Tape2"},
                {"CDR       ", "CDR"},
                {"Cable     ", "Cable"},
                {"DVD       ", "DVD"},
                {"VCR1      ", "VCR1"},
                {"VCR2      ", "VCR2"},
                {"Ldisc     ", "Laser Disc"}
              };
              auto it = source_map.find(source_code);
              if (it != source_map.end()) {
                std::string selected_source = it->second;
                ESP_LOGD("UART", "Source selected: %s", selected_source.c_str());
                id(mode).publish_state(selected_source);
              } else {
                ESP_LOGD("UART", "Unknown source: %s", source_code.c_str());
              }
              int volume = std::stoi(volume_str);
              if (volume >= 1 && volume <= 99) {
                id(volume_control).publish_state(volume);
                str[10] = '0' + (volume / 10);
                str[11] = '0' + (volume % 10);
                ESP_LOGD("UART", "Updated string with volume: %s", str.c_str());
              }
            }
logger:
button:
  - platform: template
    name: "Meridian Volume Up"
    on_press:
      - uart.write: "VP\r"
  - platform: template
    name: "Meridian Volume Down"
    on_press:
      - uart.write: "VM\r"
  - platform: template
    name: "Meridian Standby"
    on_press:
      - uart.write: "SB\r"
  - platform: template
    name: "Mute"
    on_press:
      - uart.write: "MU\r"

      
select:
  - platform: template
    name: "Meridian Source"
    id: mode
    options:
      - "CD"
      - "Radio"
      - "DTV"
      - "TV"
      - "Tape1"
      - "Tape2"
      - "CDR"
      - "Cable"
      - "DVD"
      - "VCR1"
      - "VCR2"
      - "Laser Disc"
    initial_option: "CD"
    optimistic: true
    set_action:
      - uart.write: !lambda |-
          std::map<std::string, std::vector<uint8_t>> mode_commands = {
            {"CD", {0x43, 0x44, 0x0D}},      // "CD\r"
            {"Radio", {0x52, 0x44, 0x0D}},   // "RD\r"
            {"DTV", {0x44, 0x54, 0x0D}},     // "DT\r"
            {"TV", {0x54, 0x56, 0x0D}},      // "TV\r"
            {"Tape1", {0x54, 0x31, 0x0D}},   // "T1\r"
            {"Tape2", {0x54, 0x32, 0x0D}},   // "T2\r"
            {"CDR", {0x43, 0x52, 0x0D}},     // "CR\r"
            {"Cable", {0x43, 0x42, 0x0D}},   // "CB\r"
            {"DVD", {0x44, 0x56, 0x0D}},     // "DV\r"
            {"VCR1", {0x56, 0x31, 0x0D}},    // "V1\r"
            {"VCR2", {0x56, 0x32, 0x0D}},    // "V2\r"
            {"Laser Disc", {0x4C, 0x44, 0x0D}} // "LD\r"
          };
          auto command = mode_commands.find(x);
          if (command != mode_commands.end()) {
            return command->second;
          }
          return std::vector<uint8_t>{};
number:
  - platform: template
    name: "Volume Control"
    id: volume_control
    min_value: 1
    max_value: 99
    step: 1
    initial_value: 50
    set_action:
      - uart.write: !lambda |-
          int volume = (int)x;
          std::string command = "VN";
          if (volume < 10) {
            command += "0"; 
          }
          command += std::to_string(volume) + "\r";
          std::vector<uint8_t> byte_command;
          for (char c : command) {
            byte_command.push_back(static_cast<uint8_t>(c));
          }
          return byte_command;

binary_sensor:
  - platform: remote_receiver
    name: "Volume Up IR"
    rc6:
      address: 0x10
      command: 0x10
    on_press:
      then:
        - if:
            condition:
              or:
                - not:
                    switch.is_on: ir_only_tape1
                - lambda: 'return id(mode).state == "Laser Disc";'
            then:
              - uart.write: "VP\r"

  - platform: remote_receiver
    name: "Volume Down IR"
    rc6:
      address: 0x10
      command: 0x11
    on_press:
      then:
        - if:
            condition:
              or:
                - not:
                    switch.is_on: ir_only_tape1
                - lambda: 'return id(mode).state == "Laser Disc";'
            then:
              - uart.write: "VM\r"
  - platform: template
    name: "Meridian Standby Status"
    id: meridian_standby_status
    device_class: power

          
sensor:
  - platform: wifi_signal
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"
  - platform: copy 
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: " %"
    entity_category: "diagnostic"
    device_class: ""
  - platform: uptime
    name: "Uptime s"
    id: uptime_s
    update_interval: 60s
